{"ast":null,"code":"var _jsxFileName = \"/Users/anjaliruth/Desktop/SOC Projects/GithubProjects/WeatherAppv2/myapp/src/components/MainWeatherWindow/index.js\",\n  _s = $RefreshSig$();\nimport SearchBar from \"../SearchBar\";\nimport WeatherBox from \"../WeatherBox\";\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function MainWeatherWindow() {\n  _s();\n  //create a state variable for the city that users will input\n  //Lifted state from the SearchBar component because the city is needed in the WeatherBox component\n  const [city, setCity] = useState(\"\");\n  const [todayData, setTodayData] = useState(\"\");\n  //forecast for tomorrow\n  const [day1, setDay1] = useState(\"\");\n  //forecast for the day after tomorrow\n  const [day2, setDay2] = useState(\"\");\n  //forecast for the day after the day after tomorrow\n  const [day3, setDay3] = useState(\"\");\n  //separate state just for the city because the city is at the top of the API response, and not inthe nested Data onject\n  const [location, setLocation] = useState(\"\");\n  //do the API call here\n  //call the aPI\n  //API is called in the useEffect hook\n  //city is a dependency of the useEffect hook\n  //the useEffect hook will be called when the city changes\n  //need to get the city from the search bar\n  //the search bar will be a child component of the MainWeatherWindow\n  //city here is a variable, not the state. I have passed the state into the handleSearchClick function in the SearchBar component, which now becomes a parameter when its called in the function handleSearchClick on line 21. \n  async function getWeather(city) {\n    const response = await fetch(`https://api.weatherbit.io/v2.0/forecast/daily?&city=${city}&key=44cbebc5694040768e4b8c4982357e37`);\n    const data = await response.json();\n    setLocation(data.city_name);\n    setTodayData(data.data[0]);\n    setDay1Data(data.data[1]);\n    setDay2(data.data[2]);\n    setDay3(data.data[3]);\n    console.log(data);\n  }\n\n  //all the actions i want to run while i am fetching data\n  function handleSearchClick(location) {\n    // Call the getWeather function with the current city state value\n    getWeather(location);\n  }\n\n  // Create a new Date object from the datetime string\n  let date = new Date(todayData.datetime);\n  // Get the name of the day using the toLocaleDateString method\n  let day = date.toLocaleDateString('default', {\n    weekday: 'long'\n  });\n\n  //the city will be a state variable (useState hook)\n  console.log(todayData);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      textAlign: 'center',\n      margin: '0 auto',\n      maxWidth: '300px'\n    },\n    children: [/*#__PURE__*/_jsxDEV(SearchBar, {\n      handleSearchClick: handleSearchClick,\n      city: city,\n      setCity: setCity\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: todayData && location\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: todayData && day\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: todayData && `${todayData.temp}ºC`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(WeatherBox, {\n      day1: day1\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 9\n  }, this);\n}\n_s(MainWeatherWindow, \"tRvPIRbivTz2yJ/U0ANqp75AywQ=\");\n_c = MainWeatherWindow;\nvar _c;\n$RefreshReg$(_c, \"MainWeatherWindow\");","map":{"version":3,"names":["SearchBar","WeatherBox","useState","jsxDEV","_jsxDEV","MainWeatherWindow","_s","city","setCity","todayData","setTodayData","day1","setDay1","day2","setDay2","day3","setDay3","location","setLocation","getWeather","response","fetch","data","json","city_name","setDay1Data","console","log","handleSearchClick","date","Date","datetime","day","toLocaleDateString","weekday","style","textAlign","margin","maxWidth","children","fileName","_jsxFileName","lineNumber","columnNumber","temp","_c","$RefreshReg$"],"sources":["/Users/anjaliruth/Desktop/SOC Projects/GithubProjects/WeatherAppv2/myapp/src/components/MainWeatherWindow/index.js"],"sourcesContent":["import SearchBar from \"../SearchBar\"\nimport WeatherBox from \"../WeatherBox\"\nimport {useState } from \"react\"\nexport default function MainWeatherWindow() {\n    //create a state variable for the city that users will input\n    //Lifted state from the SearchBar component because the city is needed in the WeatherBox component\n    const [city, setCity] = useState(\"\");\n    const [todayData, setTodayData] = useState(\"\");\n    //forecast for tomorrow\n    const [day1, setDay1] = useState(\"\");\n    //forecast for the day after tomorrow\n    const [day2, setDay2] = useState(\"\");\n    //forecast for the day after the day after tomorrow\n    const [day3, setDay3] = useState(\"\");\n    //separate state just for the city because the city is at the top of the API response, and not inthe nested Data onject\n    const [location, setLocation] = useState(\"\");\n    //do the API call here\n    //call the aPI\n    //API is called in the useEffect hook\n    //city is a dependency of the useEffect hook\n    //the useEffect hook will be called when the city changes\n    //need to get the city from the search bar\n    //the search bar will be a child component of the MainWeatherWindow\n    //city here is a variable, not the state. I have passed the state into the handleSearchClick function in the SearchBar component, which now becomes a parameter when its called in the function handleSearchClick on line 21. \n    async function getWeather(city) {\n        const response = await fetch(`https://api.weatherbit.io/v2.0/forecast/daily?&city=${city}&key=44cbebc5694040768e4b8c4982357e37`)\n        const data = await response.json();\n        setLocation(data.city_name);\n        setTodayData(data.data[0]);\n        setDay1Data(data.data[1]);\n        setDay2(data.data[2]);\n        setDay3(data.data[3]);\n        console.log(data)\n\n    }\n\n    //all the actions i want to run while i am fetching data\n    function handleSearchClick(location) {\n        // Call the getWeather function with the current city state value\n        getWeather(location);\n    }\n\n    // Create a new Date object from the datetime string\n    let date = new Date(todayData.datetime);\n    // Get the name of the day using the toLocaleDateString method\n    let day = date.toLocaleDateString('default', {weekday: 'long'});\n\n  \n    //the city will be a state variable (useState hook)\n    console.log(todayData);\n\n    return (\n        <div style={{ textAlign: 'center', margin: '0 auto', maxWidth: '300px' }}>\n            <SearchBar handleSearchClick={handleSearchClick} city={city} setCity={setCity}/>\n            <h1>{todayData && location}</h1>\n            <h1>{todayData && day}</h1>\n            <h1>{todayData && `${todayData.temp}ºC`}</h1>\n            <WeatherBox day1={day1}/>\n\n        </div>\n    )\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}